<?php

/**
 * User
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class User extends BaseUser
{
    //TODO: Move to configuration
	const ACTIVE_USER_TRESHOLD_SECONDS = 180;
        
        public static function getExtendedRangesOlderThan($rangetime){
            $q  = Doctrine_Query::create()
             ->from('User u')
             ->where('u.rangeTimestamp <= ?',$rangetime);
            Logger::getSQLLogger()->info($q->getSqlQuery());
            $user = $q->execute();
            return $user;
        }


        public static function getById($id) {
		$q  = Doctrine_Query::create()
             ->from('User u')
             ->where('u.id= ?',$id)
             ->leftJoin('u.Invitation i');
        Logger::getSQLLogger()->info($q->getSqlQuery());
        $user = $q->fetchOne();
        return $user;
	}
                
        /**
         * Return all meetings than older that given sum with time and 
         * timeshift
         *
         * @param int $time
         * @return array 
         */
        public function getUsersWithExpiredInvitations($time)
        {
             $q  = Doctrine_Query::create()
             ->from('User u')
             ->leftJoin('u.Invitation i')
                     ->where(sprintf('i.finaltime + %d < NOW()', $time));
             return $q->execute();
        }
        
	public static function getBySecretKey($secretKey) {
		Logger::getLogger()->info("Trying to find user with secretKey = ". $secretKey);
		$q  = Doctrine_Query::create()
             ->from('User u')
             ->where('u.secretKey = ?',$secretKey)
             ->leftJoin('u.Invitation i');
        Logger::getSQLLogger()->info($q->getSqlQuery());
        $user = $q->fetchOne();
        return $user;
    }

    public function getPeopleAroundLookedFor(){
        $distanceCalculator = new DistanceCalculator($this);
        $area = $distanceCalculator->getSearchAreaAroundUser();
        Logger::getLogger()->debug("Looking for people around for user id=" . $this->id . " in area : top_right lat=" .
                $area['top_right']['lat'] .
                ", top_right long=".
                $area['top_right']['long'].
                ", bottom_left lat=".
                $area['bottom_left']['lat'].
                ", bottom_left long=".
                $area['bottom_left']['long']);

        $query = Doctrine_Query::create()
                    ->from('User u')
                    ->where('u.latitude <= ?', $area['top_left']['lat'])
                    ->andWhere('u.latitude >= ?', $area['bottom_left']['lat'])
                    ->andWhere('u.longitude >= ?' , $area['top_left']['long'])
                    ->andWhere('u.longitude <= ?' , $area['top_right']['long'])
                    ->andWhere('u.lastRequestTimeStamp + ? >= '. time(), self::ACTIVE_USER_TRESHOLD_SECONDS)
                    ->andWhere('u.id != ?', $this->id);
        if ($this->sex && $this->lookingFor) {
            $query->andWhere('u.lookingFor LIKE \'%' . $this->sex . '%\'');
        }
        if ($this->lookingFor && strlen($this->lookingFor) == 1) {
            $query->andWhere('u.sex = ?', $this->lookingFor);
        }

        Logger::getSQLLogger()->info($query->getSqlQuery());
        $users = $query->execute();
        return $users;
    }

    public static function getAnyActiveUser()
        {
            $q  = Doctrine_Query::create()
             ->from('User u')->leftJoin('u.Invitation i');
            $u = $q->fetchOne();
            $inv = $u->Invitation;
            Logger::getSQLLogger()->info($q->getSqlQuery());
            return $u;
    }

    public static function createUserFromRequest($request) {
		Logger::getLogger()->info("Creating user from request");
		$user = new User();
		$user->updateUserFromRequest($request);
		$user->secretKey = self::getNewSecretKey($request->getParam('phoneId'));
		return $user;
	}
	
	public function updateUserFromRequest($request) {
		Logger::getLogger()->info("Updating user data from request");
		foreach($request->getParams() as $paramKey => $paramValue) {
			if (in_array($paramKey, RequestValidator::$REQUIRED_AUTH_PARAMS)) {
				$this->$paramKey = $paramValue;
			}
		}
		return $this;
	}
	
	public function setLastRequestTimeStamp() {
		$this->lastRequestTimeStamp = time();
	}
	
	public static function getAllActiveUsersExceptOne($currentUser) {
		if ($currentUser instanceof User) {
			$q = Doctrine_Query::create()
	             ->from('User u')
                 ->andWhere('u.id != ?', $currentUser->id);
                 
            switch ($currentUser->lookingFor) {
            	   case "M":
                 	$q->andWhere("u.sex = 'M'");
                 	break;
            	   case "F":
                 	$q->andWhere("u.sex = 'F'");
            	   	break;
            	   default:
            }
            
            Logger::getLogger()->info("Looking for people with sex " . $currentUser->lookingFor);
        	Logger::getSQLLogger()->info($q->getSqlQuery());
	        return $q->execute(array(), Doctrine_Core::HYDRATE_ARRAY);
		} else {
			throw new Exception("Current user is not set (null)");
		}
	}
	
	/**
	 * Secretkey is composed of two parts:
	 * 16bytes: md5(phoneId + salt)
	 * 16bytes: md5(mt_rand()));
	 */
	private static function getNewSecretKey($phoneId) {
		$appConfig = Zend_Registry::get('appConfig');
		$secretKeySalt = $appConfig['secretKeySalt'];
		$secretKeyPart1 = substr(md5($phoneId . $secretKeySalt),0,16);
		$secretKeyPart2 = substr(md5(mt_rand()),0, 16);
		$secretKey = $secretKeyPart1 . $secretKeyPart2;
		Logger::getLogger()->info("Generated new secretKey using salt from application config : " . $secretKey);
		return $secretKey;
	}
	
}